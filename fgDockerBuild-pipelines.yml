# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest
parameters:
  - name: ImagerUrl
    type: string
    default: 'NA'
variables:
  - name: AWS_REGION
    value: 'us-east-2'
  - name: ECR_REGISTRY
    value: '440744252508.dkr.ecr.us-east-2.amazonaws.com'
  - name: ECR_REPOSITORY
    value: 'willsmsvfargate'
  - name: SERVICE_NAME
    value: 'nestjs-service'
  - name: CLUSTER_NAME
    value: 'nestjs-cluster'
  - name: TASK_FAMILY
    value: 'willsmsvfargate'
  - group: Tesdev

stages:
  
  - stage: Build
    condition: eq('${{ parameters.ImagerUrl }}', 'NA')
    displayName: 'Build and push'
    jobs:
      - job: BuildImage
        displayName: 'Build and push'
        steps:
        - task: Docker@2
          displayName: Docker Build
          inputs:
            repository: $(ECR_REPOSITORY)
            command: 'build'
            Dockerfile: '**/Dockerfilefg'
            buildContext: '$(Build.SourcesDirectory)'
            arguments: '--build-arg NPM_TOKEN=$(System.AccessToken)'
        - task: ECRPushImage@1
          inputs:
            awsCredentials: 'TESAWSDEV'
            regionName: $(AWS_REGION)
            imageSource: 'imagename'
            sourceImageName: $(ECR_REPOSITORY)
            sourceImageTag: '$(Build.BuildId)'
            repositoryName: $(ECR_REPOSITORY)
            pushTag: '$(Build.BuildId)'
            outputVariable: 'ecrimage'
        - task: PowerShell@2
          name: "Transfervar"
          displayName: Set ECR variable
          inputs:
            targetType: 'inline'
            script: |
              echo 'Hello urlImage' $(ecrimage)
              Write-Host "##vso[task.setvariable variable=gecrimage;isoutput=true ]$(ecrimage)"
  
  - stage: BuildDummy
    condition: ne('${{ parameters.ImagerUrl }}', 'NA')
    displayName: 'Set image to deploy'
    jobs:
      - job: BuildImage
        displayName: 'Set image to deploy'
        steps:
        - task: Bash@3
          displayName: "Debug - List repo files"
          inputs:
            targetType: 'inline'
            script: |
              pwd
              echo "Current directory: $(Build.SourcesDirectory)"
              ls -la 
        - task: PowerShell@2
          name: "Transfervar"
          displayName: Set ECR variable
          inputs:
            targetType: 'inline'
            script: |
              echo 'Hello urlImage' ${{ parameters.ImagerUrl }}
              Write-Host "##vso[task.setvariable variable=gecrimage;isoutput=true ]${{ parameters.ImagerUrl }}"
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/devops/willsmsvfargate-task-definition.tk.json'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: DeployDev
    displayName: 'Deploy to Fargate Dev'
    dependsOn: 
      - Build
      - BuildDummy
    condition: or(succeeded('Build'), succeeded('BuildDummy'))
    jobs:
    - deployment: Deploy
      environment: dev
      variables:
      - name: ecrimageurlg
        value: $[coalesce(stageDependencies.Build.BuildImage.outputs['Transfervar.gecrimage'], stageDependencies.BuildDummy.BuildImage.outputs['Transfervar.gecrimage'])]  
        
      - group: Tesdev
      strategy:
        runOnce:
          deploy:    
            steps:
              - task: Bash@3
                displayName: Debug info
                inputs:
                  targetType: 'inline'
                  script: |
                    # Write your commands here
                    echo imagen $(ecrimageurlg)
                    pwd
                    cd $(Pipeline.Workspace)/drop
                    pwd
                    ls -la
                    cat willsmsvfargate-task-definition.tk.json
                    cp  willsmsvfargate-task-definition.tk.json $(Build.SourcesDirectory)
                    cd $(Build.SourcesDirectory)
                    pwd
                    ls -la
                  
              - task: replacetokens@6
                displayName: Token replacement
                inputs:
                  sources: 'willsmsvfargate-task-definition.tk.json'
              - task: AWSCLI@1
                displayName: Register new task
                inputs:
                  awsCredentials: 'TESAWSDEV'
                  regionName: $(AWSREGION)
                  awsCommand: 'ecs'
                  awsSubCommand: 'register-task-definition'
                  awsArguments: '--cli-input-json file://devops/willsmsvfargate-task-definition.tk.json'
              
              - task: AWSCLI@1
                displayName: Update Fargate Service
                inputs:
                  awsCredentials: 'TESAWSDEV'
                  regionName: '$(AWSREGION)'
                  awsCommand: 'ecs'
                  awsSubCommand: 'update-service'
                  awsArguments: '--cluster nestjs-cluster --service willsmsvfargate-svc --task-definition willsmsvfargate-task --desired-count 1 '         

